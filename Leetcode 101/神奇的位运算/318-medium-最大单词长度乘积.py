from typing import List


class Solution:
    def maxProduct(self, words: List[str]) -> int:
        """
        给定一个字符串数组 words，找到 length(word[i]) * length(word[j]) 的最大值，并且这两个单词不含有公共字母。你可以认为每个单词只包含小写字母。如果不存在这样的两个单词，返回 0。

        示例 1:

        输入: ["abcw","baz","foo","bar","xtfn","abcdef"]
        输出: 16
        解释: 这两个单词为 "abcw", "xtfn"。
        """
        # 常规解法，两重遍历，判断两个数是否没有交集，使用转外为list和set对比长度，一样则返回True

        # 1）把每一个单词，都转化为二进制数，规则是把26个英文字母映射到二进制数的每一位，
        # 例如a映射到第0位、b第一位。如果一个数是abc，那么这个数是00，0000，0000，0000，0000，0000，0111。
        # 2）进行这个操作是通过二进制移位，然后或上本身，fword |= 1 << ord(letter) - ord('a')，当letter是b时，ord（letter）-ord（'a'）等于1，
        # 把1往左移1位（其实就是把第二位变成了1、即存在b，第二位变为1）。
        # 3）两个数不同是通过a & b = 0来实现的，因为没有相同字母，意味着两个数在任意一位上，都不同（0和1），而0&1 = 0

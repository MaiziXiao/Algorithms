class Solution:
    def reverseBits(self, n: int) -> int:
        """
        颠倒给定的 32 位无符号整数的二进制位。

        示例 1：
        输入: 00000010100101000001111010011100
        输出: 00111001011110000010100101000000
        解释: 输入的二进制串 00000010100101000001111010011100 表示无符号整数 43261596，
            因此返回 964176192，其二进制表示形式为 00111001011110000010100101000000。

        示例 2：
        输入：11111111111111111111111111111101
        输出：10111111111111111111111111111111
        解释：输入的二进制串 11111111111111111111111111111101 表示无符号整数 4294967293，
             因此返回 3221225471 其二进制表示形式为 10111111111111111111111111111111 。
        """
        # The prefix 0b represents that the result is a binary string. 所以要从第二位开始， ：：1 从后面开始读取
        # bins = bin(n)[2:][::-1]
        # rev = bins + "0" * (32 - len(bins))
        # # int(rev, 2)将二进制装换为10进制
        # return int(rev, 2)

        result = 0
        for _ in range(32):
            result <<= 1
            # n右移一直做或
            result |= n & 1
            n >>= 1
        return result


Solution().reverseBits(43261596)
